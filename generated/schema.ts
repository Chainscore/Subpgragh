// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Request extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("specId", Value.fromBytes(Bytes.empty()));
    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("payment", Value.fromBigInt(BigInt.zero()));
    this.set("callbackFunctionId", Value.fromBytes(Bytes.empty()));
    this.set("callbackAddress", Value.fromBytes(Bytes.empty()));
    this.set("cancelExpiration", Value.fromBigInt(BigInt.zero()));
    this.set("finalData", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Request entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Request must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Request", id.toString(), this);
    }
  }

  static load(id: string): Request | null {
    return changetype<Request | null>(store.get("Request", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get specId(): Bytes {
    let value = this.get("specId");
    return value!.toBytes();
  }

  set specId(value: Bytes) {
    this.set("specId", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get payment(): BigInt {
    let value = this.get("payment");
    return value!.toBigInt();
  }

  set payment(value: BigInt) {
    this.set("payment", Value.fromBigInt(value));
  }

  get callbackFunctionId(): Bytes {
    let value = this.get("callbackFunctionId");
    return value!.toBytes();
  }

  set callbackFunctionId(value: Bytes) {
    this.set("callbackFunctionId", Value.fromBytes(value));
  }

  get callbackAddress(): Bytes {
    let value = this.get("callbackAddress");
    return value!.toBytes();
  }

  set callbackAddress(value: Bytes) {
    this.set("callbackAddress", Value.fromBytes(value));
  }

  get cancelExpiration(): BigInt {
    let value = this.get("cancelExpiration");
    return value!.toBigInt();
  }

  set cancelExpiration(value: BigInt) {
    this.set("cancelExpiration", Value.fromBigInt(value));
  }

  get confirmations(): Array<string> {
    let value = this.get("confirmations");
    return value!.toStringArray();
  }

  set confirmations(value: Array<string>) {
    this.set("confirmations", Value.fromStringArray(value));
  }

  get finalData(): BigInt {
    let value = this.get("finalData");
    return value!.toBigInt();
  }

  set finalData(value: BigInt) {
    this.set("finalData", Value.fromBigInt(value));
  }
}

export class ConfirmationCommittment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("data", Value.fromBigInt(BigInt.zero()));
    this.set("request", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ConfirmationCommittment entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ConfirmationCommittment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ConfirmationCommittment", id.toString(), this);
    }
  }

  static load(id: string): ConfirmationCommittment | null {
    return changetype<ConfirmationCommittment | null>(
      store.get("ConfirmationCommittment", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get data(): BigInt {
    let value = this.get("data");
    return value!.toBigInt();
  }

  set data(value: BigInt) {
    this.set("data", Value.fromBigInt(value));
  }

  get request(): string {
    let value = this.get("request");
    return value!.toString();
  }

  set request(value: string) {
    this.set("request", Value.fromString(value));
  }
}
